---
// Astro Imports
import { Image } from 'astro:assets'
import { getCollection } from 'astro:content'

// Project Imports
import Layout from '@/layouts/Layout.astro'
import ProjectTechStackCard from '@/components/ProjectTechStackCard.astro'

// Types Imports
import type { ProjectTechStack } from '@/types'
import { generateProjectJsonLD } from '@/components/jsonLD'

// function to create the path for all the projects
export async function getStaticPaths() {
  const projects = await getCollection('projects', ({ id }) => {
    return id.startsWith('en')
  })
  return projects.map((project) => ({
    params: { slug: project.id.replace('en/', '') },
    props: project
  }))
}

// Astro Props
const project = Astro.props

// Props deconstruction
const {
  title,
  excerpt,
  image,
  imageAlt,
  liveLink,
  repoLink,
  mainColor,
  secondaryColor,
  techStack,
  testimonial,
  imageSecondary
} = project.data

// Astro Params
const slug = Astro.params.slug

// Special function to render the content of the MD
const content = project.rendered

// Redirect in case the path dosent exits
if (!slug || !project) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found'
  })
}

// create static page instead of SSR
export const prerender = true

const ld = generateProjectJsonLD(project, 'en')
---

<Layout
  description={excerpt}
  title={title}
  label='Projects'
  link='/en/projects'
  border='border-gray-800'
  ld={ld}
>
  <main
    class='relative mt-20 flex w-screen flex-col items-center justify-center gap-10 md:mt-0 md:gap-20 md:px-24'
  >
    <!-- Title Section -->
    <div
      class='flex h-[70vh] w-full justify-center text-center uppercase'
      style={`background-color: ${mainColor}`}
    >
      <h1
        class='self-center font-prata text-[11vw] md:self-end'
        style={`color: ${secondaryColor}`}
      >
        {title}
      </h1>
    </div>

    <!-- SubHeader -->
    <h2
      class='my-10 max-w-screen-lg px-5 font-prata text-[7vw] md:p-0 md:text-[3vw] md:leading-[4rem]'
    >
      {excerpt}
    </h2>
    <ul
      role='presentation'
      class='flex flex-col items-start justify-between gap-3 px-5 md:flex-row md:gap-5 md:px-10'
    >
      {
        techStack.map((tech: ProjectTechStack) => (
          <ProjectTechStackCard techStack={tech} lang='es' />
        ))
      }
    </ul>
    <Image src={image} alt={`${imageAlt} - Showcase`} loading='lazy' />

    <!-- Content Section -->
    <section id='content' class='prose max-w-[1200px] px-5'>
      <div set:html={content?.html} />

      <Image src={imageSecondary} alt={`${imageAlt} - Style`} loading='lazy' />

      <!-- Testimonial Section -->
      {
        testimonial && (
          <section
            id='Testimonial'
            class='w-full pb-12 text-center text-gray-800 md:leading-tight'
          >
            <h2 class='font-prata text-[3vw]'>"{testimonial.quote}"</h2>
            <div class='flex w-full justify-between'>
              <p class='text-[2vw]'>{testimonial.name}</p>
              <p class='text-[2vw]'>{testimonial.role}</p>
            </div>
          </section>
        )
      }
    </section>
  </main>

  <!-- Widget -->
  <div
    id='widget'
    class='fixed bottom-7 right-7 space-y-2 p-3 text-left opacity-0 transition-opacity duration-150 md:bottom-10 md:right-10 md:p-5'
    style={`background-color: ${mainColor}; color: ${secondaryColor}`}
  >
    <a
      href={repoLink}
      target='_blank'
      class='hover-underline-animation-widget text-sm md:text-base'>CODE</a
    >
    <a
      href={liveLink}
      target='_blank'
      class='hover-underline-animation-widget text-sm md:text-base'>LIVE</a
    >
  </div>

  <!-- Courtin -->
  <div
    class='absolute inset-0 z-0 w-screen origin-bottom bg-gray-800'
    id='courtin'
  >
  </div>
</Layout>

<script>
  const share = document.getElementById('widget')

  window.addEventListener('scroll', () => {
    if (window.scrollY > 300) {
      share?.classList.add('opacity-1') // Show the element
      share?.classList.remove('opacity-0') // Show the element
    } else {
      share?.classList.add('opacity-0') // Hide the element
      share?.classList.remove('opacity-1') // Hide the element
    }
  })
</script>

<style>
  .hover-underline-animation-widget {
    display: block;
    position: relative;
  }

  .hover-underline-animation-widget::after {
    content: '';
    position: absolute;
    width: 100%;
    transform: scaleX(0);
    height: 2px;
    bottom: 0;
    left: 0;
    background-color: white;
    transform-origin: bottom right;
    transition: transform 0.25s ease-out;
  }

  .hover-underline-animation-widget:hover::after {
    transform: scaleX(1);
    transform-origin: bottom left;
  }

  html {
    scrollbar-color: #000000 #a3bbfb;
  }
</style>

<script>
  import anime from 'animejs/lib/anime.es.js'

  anime({
    targets: '#courtin',
    scaleY: [1, 0],
    duration: 700,
    easing: 'easeInExpo'
  })
</script>
