---
import Layout from '@/layouts/Layout.astro'
import Design from '@/assets/balazs-ketyi-_x335IZXxfc-unsplash.webp'
import ClientForm from '@/components/react/client-form'
---

<Layout
  description='Project Form'
  title='Form'
  className='bg-background'
  label='Home'
  link='/en/'
  border='border-gray-800'>
  <main
    class='w-screen p-10 mt-20 md:mt-5 md:p-24 relative flex flex-col md:flex-row justify-around items-center gap-16 md:gap-32 z-10'>
    <aside class='flex-1'>
      <!-- Header -->
      <div
        class='[&>h2]:text-[16vw] md:[&>h2]:text-[5vw] 2xl:[&>h2]:text-[7vw] font-prata opacity-0 [&>h2]:leading-[0.95em]'
        id='links'>
        <h2>Formulario de Cliente</h2>
      </div>

      <ClientForm client:load />
    </aside>

    <articule
      class='self-start z-10 sticky top-20 flex-1 opacity-0 hidden md:block aspect-square'
      id='image'>
      <img
        src={Design.src}
        alt='Design'
        loading='eager'
        id='image-to-change'
        class='w-full h-full object-cover'
      />
    </articule>
  </main>
  <div
    class='absolute bg-gray-800 w-screen inset-0 z-50 origin-bottom'
    id='courtin'>
  </div>
</Layout>

<script>
  import anime from 'animejs/lib/anime.es.js'

  anime
    .timeline({
      easing: 'easeInExpo',
    })
    .add({
      targets: '#courtin',
      scaleY: [1, 0],
      duration: 700,
    })
    .add(
      {
        targets: '#form',
        opacity: 1,
        translateY: [40, 0],
        duration: 600,
      },
      500
    )
    .add(
      {
        targets: '#links',
        opacity: 1,
        duration: 500,
        delay: anime.stagger(100),
      },
      900
    )
    .add(
      {
        targets: '#image',
        opacity: 1,
        translateY: [10, 0],
        delay: 200,
        duration: 600,
      },
      700
    )

  // Get the image element
  const imageElement = document.getElementById(
    'image-to-change'
  ) as HTMLImageElement

  // Get all sections in the aside element
  const sections = document.querySelectorAll('aside fieldset')

  // Initialize an Intersection Observer
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        // If a section intersects with the viewport
        if (entry.isIntersecting) {
          // Get the data-image attribute value of the intersecting section
          const imageUrl = entry.target.getAttribute('data-image') as string
          // Change the src attribute of the image element to the new image URL
          imageElement.src = imageUrl
        }
      })
    },
    {
      // Set the root margin to specify the threshold for intersection
      rootMargin: '0px',
      // Use the threshold of 0 to trigger the callback as soon as even one pixel intersects
      threshold: 0,
    }
  )

  // Observe each section
  sections.forEach((section) => {
    observer.observe(section)
  })
</script>
